{{- $class := .Class -}}
{{- $lower := toLower $class -}}
{{- $single := toSingular $class -}}
{{- $upper := toUpper $class -}}
{{- $isAbis := eq $class "Abis" -}}
{{- $isNames := eq $class "Names" -}}
{{- $isMonitors := eq $class "Monitors" -}}
{{- $hasUpdate := $isNames -}}
{{- $hasDelete := contains .CrudStrs "delete" -}}
{{- $hasActions := or (or $isNames $isAbis) $isMonitors -}}
{{- $hasForms := .HasForms -}}
{{- $isStatus := eq $class "Status" -}}
{{- $actions := replace .CrudStrs ", 'update'" "" -}}
{{- $actions := replace $actions ", 'undelete'" "" -}}
{{- $models := printf "%s, msgs" $lower -}}
{{- if or $isNames $isStatus -}}
  {{- $models = printf "msgs, %s" $lower -}}
{{- end -}}
{{- $apis := printf "Get%sPage, Reload" $class -}}
{{- if $isAbis -}}
  {{- $apis = printf "%sCrud, Get%sPage, Reload" $class $class -}}
{{- else if or $isNames $isMonitors -}}
  {{- $apis = printf "Get%sPage, %sCrud, Reload" $class $class -}}
{{- end -}}
// Copyright 2016, 2026 The TrueBlocks Authors. All rights reserved.
// Use of this source code is governed by a license that can
// be found in the LICENSE file.
/*
 * Parts of this file were auto generated. Edit only those parts of
 * the code inside of 'EXISTING_CODE' tags.
 */
// === SECTION 1: Imports & Dependencies ===
import { useCallback, useEffect, useMemo, useRef, useState } from 'react';

import { {{$apis}} } from '@app';
import { {{if $hasActions}}Action, {{end}}BaseTab, {{if $isNames}}ConfirmModal, {{end}}usePagination } from '@components';
import { ViewStateKey, useFiltering, useSorting } from '@contexts';
{{- if $hasActions }}
import { ActionType } from '@hooks';
{{- end }}
import {
  DataFacetConfig, 
  {{if not .HasCruds}}ActionConfig, {{end}}
  toPageDataProp,
  {{- if $isNames }}
  useActionMsgs,
  {{- end }}
  {{- if .HasCruds}}
  useActions,
  {{- end}}
  {{- if $isNames }}
  useSilencedDialog,
  {{- end }}
  useColumns,
} from '@hooks';
// prettier-ignore
import { useActiveFacet, useEvent, usePayload } from '@hooks';
import { {{if $hasForms}}FormView, {{end}}TabView } from '@layout';
{{- if .HasCruds }}
import { Group } from '@mantine/core';
{{- end }}
import { useHotkeys } from '@mantine/hooks';
import { {{$models}}, types } from '@models';
import { ActionDebugger, useErrorHandler } from '@utils';

import { getColumns } from './columns';
import { DEFAULT_FACET, ROUTE, {{$lower}}Facets } from './facets';

// === END SECTION 1 ===

export const {{$class}} = () => {
  // === SECTION 2.2: Hook Initialization ===
  const createPayload = usePayload();

  const activeFacetHook = useActiveFacet({
    facets: {{$lower}}Facets,
    defaultFacet: DEFAULT_FACET,
    viewRoute: ROUTE,
  });
  const { availableFacets, getCurrentDataFacet } = activeFacetHook;

  const [pageData, setPageData] = useState<{{$lower}}.{{$class}}Page | null>(null);
  const viewStateKey = useMemo(
    (): ViewStateKey => ({
      viewName: ROUTE,
      tabName: getCurrentDataFacet(),
    }),
    [getCurrentDataFacet],
  );

  const { error, handleError, clearError } = useErrorHandler();
  const { pagination, setTotalItems{{if .HasCruds}}, goToPage{{end}} } = usePagination(viewStateKey);
  const { sort } = useSorting(viewStateKey);
  const { filter } = useFiltering(viewStateKey);
  {{- if $isNames }}
  // === SECTION 2.1: Modal State ===
  const { emitSuccess } = useActionMsgs('names');
  const [confirmModal, setConfirmModal] = useState<{
    opened: boolean;
    address: string;
    title: string;
    message: string;
    onConfirm: () => void;
  }>({
    opened: false,
    address: '',
    title: '',
    message: '',
    onConfirm: () => {},
  });

  const { isSilenced } = useSilencedDialog('createCustomName');
  // === END SECTION 2.1 ===
  {{- end }}

  // === END SECTION 2.2 ===

  // === SECTION 3: Data Fetching Logic ===
  const fetchData = useCallback(async () => {
    clearError();
    try {
      const result = await Get{{$class}}Page(
        createPayload(getCurrentDataFacet()),
        pagination.currentPage * pagination.pageSize,
        pagination.pageSize,
        sort,
        filter,
      );
      setPageData(result);
      setTotalItems(result.totalItems || 0);
    } catch (err: unknown) {
      handleError(err, `Failed to fetch ${getCurrentDataFacet()}`);
    }
  }, [
    clearError,
    createPayload,
    getCurrentDataFacet,
    pagination.currentPage,
    pagination.pageSize,
    sort,
    filter,
    setTotalItems,
    handleError,
  ]);

  const currentData = useMemo(() => {
    if (!pageData) return [];

    const facet = getCurrentDataFacet();
    switch (facet) {
      {{range .Facets}}case types.DataFacet.{{toUpper .Name}}:
        return pageData.{{toLower .Store}} || [];
      {{end -}}
      default:
        return [];
    }
  }, [pageData, getCurrentDataFacet]);
  // === END SECTION 4 ===

  // === SECTION 4: Event Handling ===
  useEvent(
    msgs.EventType.DATA_LOADED,
    (_message: string, payload?: Record<string, unknown>) => {
      if (payload?.collection === '{{$lower}}') {
        const eventDataFacet = payload.dataFacet;
        if (eventDataFacet === getCurrentDataFacet()) {
          fetchData();
        }
      }
    },
  );

  useEffect(() => {
    fetchData();
  }, [fetchData]);

  const handleReload = useCallback(async () => {
    try {
      Reload(createPayload(getCurrentDataFacet())).then(() => {
        // The data will reload when the DataLoaded event is fired.
      });
    } catch (err: unknown) {
      handleError(err, `Failed to reload ${getCurrentDataFacet()}`);
    }
  }, [getCurrentDataFacet, createPayload, handleError]);

  useHotkeys([['mod+r', handleReload]]);
  // === END SECTION 4 ===

  // === SECTION 6: Actions ===
{{- if .HasCruds}}
  const postFunc = useCallback((item: types.{{$single}}): types.{{$single}} => {
    // EXISTING_CODE
    // EXISTING_CODE
    return item;
  }, []);

  const enabledActions = useMemo(() => {
    // EXISTING_CODE
    // EXISTING_CODE
  }, [{{if not (or $isAbis $isMonitors)}}getCurrentDataFacet{{end}}]);

  // prettier-ignore
  const { handlers, config } = useActions({
    collection: '{{$lower}}',
    viewStateKey,
    pagination,
    goToPage,
    sort,
    filter,
    enabledActions,
    pageData,
    setPageData,
    setTotalItems,
    crudFunc: {{$class}}Crud,
    pageFunc: Get{{$class}}Page,
    postFunc,
    pageClass: {{$lower}}.{{$class}}Page,
    updateItem: types.{{toSingular $class}}.createFrom({}),
    createPayload,
    getCurrentDataFacet,
  });

  const { {{ .Handlers }} } = handlers;

  // EXISTING_CODE
  // EXISTING_CODE

  const headerActions = useMemo(() => {
    if (config.headerActions.length === 0) return null;
    return (
      <Group gap="xs" style={ { flexShrink: 0 } }>
        {config.headerActions.map((action) => {
          const handlerKey =
            `handle${action.type.charAt(0).toUpperCase() + action.type.slice(1)}` as keyof typeof handlers;
          const handler = handlers[handlerKey] as () => void;
          return (
            <Action
              key={action.type}
              icon={
                action.icon as keyof ReturnType<
                  typeof import('@hooks').useIconSets
                >
              }
              onClick={handler}
              title={
                action.requiresWallet && !config.isWalletConnected
                  ? `${action.title} (requires wallet connection)`
                  : action.title
              }
              size="sm"
              isSubdued={action.requiresWallet && !config.isWalletConnected}
            />
          );
        })}
      </Group>
    );
  }, [config.headerActions, config.isWalletConnected, handlers]);
  {{- end }}
  // === END SECTION 6 ===

  // === SECTION 7: Form & UI Handlers ===
  {{- if $hasActions }}
  const showActions = useMemo(() => {
    return (
      {{- if $hasDelete }}
      enabledActions.includes('delete' as ActionType) ||
      {{- end }}
      enabledActions.includes('remove' as ActionType) {{- if $isNames }}||
      enabledActions.includes('autoname' as ActionType)
      {{- end }}
    );
  }, [enabledActions]);

  const getCanRemove = useCallback(
    {{- if or $isNames $isMonitors }}
    (row: unknown): boolean => {
      return (
        Boolean((row as unknown as types.{{toSingular $class}})?.deleted) &&
        enabledActions.includes('remove' as ActionType)
      );
    },
    {{- else }}
      {{- if $isAbis }}
    (_row: unknown): boolean => {
      return getCurrentDataFacet() === types.DataFacet.DOWNLOADED;
    },
      {{- else }}
        {{- if not .HasCruds }}
          (_row: unknown): boolean => {
            return false;
          },
        {{- else }}
          (row: unknown): boolean => {
            return Boolean((row as unknown as types.{{$single}})?.deleted);
          },
        {{- end }}
      {{- end }}
    {{- end }}
    [{{if or $isNames $isMonitors}}enabledActions{{end}}{{if $isAbis}}getCurrentDataFacet{{end}}],
  );
  {{- else }}
  const showActions = false;
  const getCanRemove = useCallback(
    (_row: unknown): boolean => {
      return false;
    },
    [],
  );
  {{- end }}

  const currentColumns = useColumns(
    getColumns(getCurrentDataFacet()),
    {
      showActions,
      actions: [{{$actions}}],
      getCanRemove,
    },
    {{- if .HasCruds}}
    {
{{.HandlerStrs}}
    },
    {{- else}}
    {},
    {{- end}}
    toPageDataProp(pageData),
    {{if .HasCruds}}config{{else}}{} as ActionConfig{{end}},
    {{not $isAbis}} /* perRowCrud */,
  );
  // === END SECTION 7 ===

  // === SECTION 8: Tab Configuration ===
  {{- if $hasUpdate }}
  const canUpdate =
    enabledActions.includes('update' as ActionType) ||
    enabledActions.includes('add' as ActionType);
  {{- end}}

  {{- if $hasForms }}
  const isForm = useCallback((facet: types.DataFacet) => {
    switch (facet) {
      {{range .Facets}}{{if or .IsForm .IsDashboard}}case types.DataFacet.{{toUpper .Name}}:
        return true;
      {{end}}{{end}}default:
        return false;
    }
  }, []);
  {{- end}}

  const perTabContent = useMemo(() => {
    const actionDebugger = (
      <ActionDebugger
        enabledActions={ {{if $hasActions}}enabledActions{{else}}[]{{end}} }
        setActiveFacet={activeFacetHook.setActiveFacet}
      />
    );

    {{- if $hasForms }}
    const facet = getCurrentDataFacet();
    if (isForm(facet)) {
      const {{$lower}}Data = currentData[0] as unknown as Record<string, unknown>;
      if (!{{$lower}}Data) {
        return <div>No {{$lower}} data available</div>;
      }
      const fieldsWithValues = getColumns(getCurrentDataFacet()).map(
        (field) => ({
          ...field,
          value:
            ({{$lower}}Data?.[field.name as string] as
              | string
              | number
              | boolean
              | undefined) || field.value,
          readOnly: true,
        }),
      );
      return (
        <FormView
          title="{{toProper $lower}} Information"
          formFields={fieldsWithValues}
          onSubmit={() => {}}
        />
      );
    } else {
      return (
        <BaseTab<Record<string, unknown>>
          data={currentData as unknown as Record<string, unknown>[]}
          columns={currentColumns}
          loading={!!pageData?.isFetching}
          error={error}
          debugComponent={actionDebugger}
          headerActions={ {{if .HasCruds}}headerActions{{else}}[]{{end}} }
          viewStateKey={viewStateKey}
        />
      );
    }
    {{- else}}
    return (
      <BaseTab<Record<string, unknown>>
        data={currentData as unknown as Record<string, unknown>[]}
        columns={currentColumns}
        loading={!!pageData?.isFetching}
        error={error}
        viewStateKey={viewStateKey}
        {{- if $hasUpdate }}
        onSubmit={canUpdate ? handleUpdate : undefined}
        {{- end }}
        debugComponent={actionDebugger}
        headerActions={ {{if .HasCruds}}headerActions{{else}}[]{{end}} }
        {{- if .HasCruds }}
        {{- if $hasDelete }}
        onDelete={
          enabledActions.includes('delete' as ActionType)
            ? (rowData: Record<string, unknown>) => {
                const address = String(rowData.address || '');
                handleToggle(address);
              }
            : undefined
        }
        {{- end }}
        onRemove={
          enabledActions.includes('remove' as ActionType)
            ? (rowData: Record<string, unknown>) => {
                const address = String(rowData.address || '');
                handleRemove(address);
              }
            : undefined
        }
        {{- if $isNames }}
        onAutoname={
          enabledActions.includes('autoname' as ActionType)
            ? (rowData: Record<string, unknown>) => {
                const address = String(rowData.address || '');
                handleAutoname(address);
              }
            : undefined
        }
        {{- end }}
        {{- end }}
      />
    );
    {{- end}}
  }, [
    currentData,
    currentColumns,
    pageData?.isFetching,
    error,
    {{- if $hasUpdate }}
    handleUpdate,
    canUpdate,
    {{- end }}
    viewStateKey,
    {{- if $hasForms}}
    isForm,
    getCurrentDataFacet,
    {{- end}}
    {{- if .HasCruds }}
    headerActions,
    {{- if $hasDelete }}
    handleToggle,
    {{- end }}
    handleRemove,
    {{- if $isNames }}
    handleAutoname,
    {{- end }}
    {{- end }}
    {{- if $hasActions }}
    enabledActions,
    {{- end }}
    activeFacetHook.setActiveFacet,
  ]);

  const tabs = useMemo(
    () =>
      availableFacets.map((facetConfig: DataFacetConfig) => ({
        label: facetConfig.label,
        value: facetConfig.id,
        content: perTabContent,
        dividerBefore: facetConfig.dividerBefore,
      })),
    [availableFacets, perTabContent],
  );
  // === END SECTION 8 ===

  // === SECTION 9: Render/JSX ===
  const renderCnt = useRef(0);
  // renderCnt.current++;
  return (
    <div className="mainView">
      <TabView tabs={tabs} route={ROUTE} />
      {error && (
        <div>
          <h3>{`Error fetching ${getCurrentDataFacet()}`}</h3>
          <p>{error.message}</p>
        </div>
      )}
      {renderCnt.current > 0 && <div>{`renderCnt: ${renderCnt.current}`}</div>}
      {{- if $isNames }}
      <ConfirmModal
        opened={confirmModal.opened}
        onClose={handleCloseModal}
        onConfirm={confirmModal.onConfirm}
        title={confirmModal.title}
        message={confirmModal.message}
        dialogKey="confirm{{$class}}Modal"
      />
      {{- end }}
    </div>
  );
  // === END SECTION 9 ===
};

// EXISTING_CODE
// EXISTING_CODE

{{$class := .Class}}
{{$isExports := eq .Class "Exports"}}
// Copyright 2016, 2025 The TrueBlocks Authors. All rights reserved.
// Use of this source code is governed by a license that can
// be found in the LICENSE file.
/*
 * Parts of this file were auto generated. Edit only those parts of
 * the code inside of 'EXISTING_CODE' tags.
 */

package {{toLower .Class}}

import (
	"fmt"
	"sync"

	// EXISTING_CODE
	// EXISTING_CODE
)

// EXISTING_CODE
// EXISTING_CODE

{{range .Stores}}type {{toSingular .}} = sdk.{{toSingular .}}
{{end}}

var (
	{{range .Stores}}
	{{toLower .}}Store {{if $isExports}}= make(map[string]{{end}}*store.Store[{{toSingular .}}]{{if $isExports}}){{end}}
	{{toLower .}}StoreMu   sync.Mutex
	{{end}}
)

{{range .Stores}}
func (c *{{$class}}Collection) get{{.}}Store() *store.Store[{{toSingular .}}] {
	{{toLower .}}StoreMu.Lock()
	defer {{toLower .}}StoreMu.Unlock()

{{if $isExports}}	chain := preferences.GetLastChain()
	address := preferences.GetLastAddress()
	storeKey := getStoreKey(chain, address)
	theStore := {{toLower .}}Store[storeKey]
{{else}}	theStore := {{toLower .}}Store
{{end -}}
	if theStore == nil {
		queryFunc := func(ctx *output.RenderCtx) error {
			// EXISTING_CODE
			// EXISTING_CODE
			return nil
		}

		processFunc := func(item interface{}) *{{toSingular .}} {
			// EXISTING_CODE
			// EXISTING_CODE
			if it, ok := item.(*{{toSingular .}}); ok {
				return it
			}
			return nil
		}

		mappingFunc := func(item *{{toSingular .}}) (key interface{}, includeInMap bool) {
			// EXISTING_CODE
			// EXISTING_CODE
			return nil, false
		}

		// EXISTING_CODE
		// EXISTING_CODE
		theStore = store.NewStore(storeName, queryFunc, processFunc, mappingFunc)
		{{toLower .}}Store{{if $isExports}}[storeKey]{{end}} = theStore
	}

	return theStore
}
{{end}}

func (c *{{$class}}Collection) GetStoreName(dataFacet types.DataFacet) string {
	switch dataFacet {
	{{range .Facets}}case {{$class}}{{.Name}}:
		return "{{toLower $class}}-{{toLower .Store}}"
	{{end -}}
	default:
		return ""
	}
}

// TODO: THIS SHOULD BE PER STORE - SEE EXPORT COMMENTS
{{- $val := .Class}}
{{if $isExports}}{{$val = toSingular .Class}}{{end -}}
func Get{{.Class}}Count(payload *types.Payload) (int, error) {
	chain := preferences.GetLastChain()
	{{if $isExports}}address := preferences.GetLastAddress()
	{{end -}}
	countOpts := sdk.{{$val}}Options{
		Globals: sdk.Globals{Cache: true, Chain: chain},
		{{if $isExports}}Addrs: []string{address},
		{{end -}}
	}
	if countResult, _, err := countOpts.{{$val}}Count(); err != nil {
		return 0, fmt.Errorf("{{$val}}Count query error: %v", err)
	} else if len(countResult) > 0 {
		return int(countResult[0].Count), nil
	}
	return 0, nil
}

var (
	collections   = make(map[store.CollectionKey]*{{.Class}}Collection)
	collectionsMu sync.Mutex
)

func Get{{.Class}}Collection(payload *types.Payload) *{{.Class}}Collection {
	collectionsMu.Lock()
	defer collectionsMu.Unlock()

	key := store.GetCollectionKey(payload)
	if collection, exists := collections[key]; exists {
		return collection
	}

	collection := New{{.Class}}Collection()
	collections[key] = collection
	return collection
}

// EXISTING_CODE
// EXISTING_CODE
